{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "78baa84b-29b0-4ca2-88d7-861f2b4aaed2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8a2e0af647aa4a3187eca174fe503d2c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(IntSlider(value=1, description='Year', max=2, min=1), IntSlider(value=1, description='Daâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import ipywidgets as widgets\n",
    "from IPython.display import display\n",
    "import pandas as pd\n",
    "\n",
    "# ---------------------------\n",
    "# Create the full portfolio DataFrame\n",
    "# ---------------------------\n",
    "portfolio_data = [\n",
    "    # Big Coal\n",
    "    [\"Big Coal\", \"FOUR CORNERS\", \"South\", 1900, 11.67, 3.00, 35.00, 1.50, 36.50, 1.10, 8000, \"Coal\"],\n",
    "    [\"Big Coal\", \"ALAMITOS 7\", \"South\", 250, 16.05, 4.50, 72.22, 1.50, 73.72, 0.85, 0, \"Gas\"],\n",
    "    [\"Big Coal\", \"HUNTINGTON BEACH 1&2\", \"South\", 300, 8.67, 4.50, 39.00, 1.50, 40.50, 0.46, 2000, \"Gas\"],\n",
    "    [\"Big Coal\", \"HUNTINGTON BEACH 5\", \"South\", 150, 14.44, 4.50, 65.00, 1.50, 66.50, 0.77, 2000, \"Gas\"],\n",
    "    [\"Big Coal\", \"REDONDO 5&6\", \"South\", 350, 8.99, 4.50, 40.44, 1.50, 41.94, 0.48, 3000, \"Gas\"],\n",
    "    [\"Big Coal\", \"REDONDO 7&8\", \"South\", 950, 8.99, 4.50, 40.44, 1.50, 41.94, 0.48, 5000, \"Gas\"],\n",
    "    # Old Timers\n",
    "    [\"Old Timers\", \"BIG CREEK\", \"South\", 1000, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 15000, \"Hydro\"],\n",
    "    [\"Old Timers\", \"MOHAVE 1\", \"South\", 750, 10.00, 3.00, 30.00, 4.50, 34.50, 0.94, 15000, \"Coal\"],\n",
    "    [\"Old Timers\", \"MOHAVE 2\", \"South\", 750, 10.00, 3.00, 30.00, 4.50, 34.50, 0.94, 15000, \"Coal\"],\n",
    "    [\"Old Timers\", \"HIGHGROVE\", \"South\", 150, 10.91, 4.50, 49.11, 0.50, 49.61, 0.58, 0, \"Gas\"],\n",
    "    [\"Old Timers\", \"SAN BERNADINO\", \"South\", 100, 11.88, 4.50, 53.44, 0.50, 53.94, 0.63, 0, \"Gas\"],\n",
    "    # East Bay\n",
    "    [\"East Bay\", \"PITTSBURGH 1-4\", \"North\", 650, 8.99, 4.50, 40.44, 0.50, 40.94, 0.48, 2500, \"Gas\"],\n",
    "    [\"East Bay\", \"PITTSBURGH 5&6\", \"North\", 650, 8.02, 4.50, 36.11, 0.50, 36.61, 0.43, 2500, \"Gas\"],\n",
    "    [\"East Bay\", \"PITTSBURGH 7\", \"North\", 700, 13.16, 4.50, 59.22, 0.50, 59.72, 0.70, 4000, \"Gas\"],\n",
    "    [\"East Bay\", \"CONTRA COSTA 4&5\", \"North\", 150, 12.84, 4.50, 57.78, 0.50, 58.28, 0.68, 1000, \"Gas\"],\n",
    "    [\"East Bay\", \"CONTRA COSTA 6&7\", \"North\", 700, 8.67, 4.50, 39.00, 0.50, 39.50, 0.46, 6000, \"Gas\"],\n",
    "    [\"East Bay\", \"POTRERO HILL\", \"North\", 150, 15.41, 4.50, 69.33, 0.50, 69.83, 0.82, 0, \"Gas\"],\n",
    "    # Low Fossil\n",
    "    [\"Low Fossil\", \"HUMBOLDT\", \"North\", 150, 10.43, 4.50, 46.94, 0.50, 47.44, 0.55, 0, \"Gas\"],\n",
    "    [\"Low Fossil\", \"HELMS\", \"North\", 800, 0.00, 0.00, 0.00, 0.50, 0.50, 0.00, 15000, \"Hydro\"],\n",
    "    [\"Low Fossil\", \"HUNTERS POINT 1&2\", \"North\", 150, 10.59, 4.50, 47.67, 1.50, 49.17, 0.56, 1000, \"Gas\"],\n",
    "    [\"Low Fossil\", \"HUNTERS POINT 4\", \"North\", 250, 16.53, 4.50, 74.39, 1.50, 75.89, 0.88, 1000, \"Gas\"],\n",
    "    [\"Low Fossil\", \"DIABLO CANYON 1\", \"North\", 1000, 1.00, 7.50, 7.50, 4.00, 11.50, 0.00, 20000, \"Nuclear\"],\n",
    "    # Big Gas\n",
    "    [\"Big Gas\", \"EL SEGUNDO 1&2\", \"South\", 400, 9.63, 4.50, 43.33, 1.50, 44.83, 0.51, 1000, \"Gas\"],\n",
    "    [\"Big Gas\", \"EL SEGUNDO 3&4\", \"South\", 650, 8.83, 4.50, 39.72, 1.50, 41.22, 0.47, 1000, \"Gas\"],\n",
    "    [\"Big Gas\", \"LONG BEACH\", \"South\", 550, 11.56, 4.50, 52.00, 0.50, 52.50, 0.61, 2000, \"Gas\"],\n",
    "    [\"Big Gas\", \"NORTH ISLAND\", \"South\", 150, 14.44, 4.50, 65.00, 0.50, 65.50, 0.77, 0, \"Gas\"],\n",
    "    [\"Big Gas\", \"ENCINA\", \"South\", 950, 9.15, 4.50, 41.17, 0.50, 41.67, 0.49, 2000, \"Gas\"],\n",
    "    [\"Big Gas\", \"KEARNY\", \"South\", 200, 19.90, 4.50, 89.56, 0.50, 90.06, 1.06, 0, \"Gas\"],\n",
    "    [\"Big Gas\", \"SOUTH BAY\", \"South\", 700, 9.63, 4.50, 43.33, 0.50, 43.83, 0.51, 2000, \"Gas\"],\n",
    "    # Bay Views\n",
    "    [\"Bay Views\", \"MORRO BAY 1&2\", \"North\", 335, 8.51, 4.50, 38.28, 0.50, 38.78, 0.45, 2000, \"Gas\"],\n",
    "    [\"Bay Views\", \"MORRO BAY 3&4\", \"North\", 665, 8.02, 4.50, 36.11, 0.50, 36.61, 0.43, 4000, \"Gas\"],\n",
    "    [\"Bay Views\", \"MOSS LANDING 6\", \"North\", 750, 6.90, 4.50, 31.06, 1.50, 32.56, 0.37, 8000, \"Gas\"],\n",
    "    [\"Bay Views\", \"MOSS LANDING 7\", \"North\", 750, 6.90, 4.50, 31.06, 1.50, 32.56, 0.37, 8000, \"Gas\"],\n",
    "    [\"Bay Views\", \"OAKLAND\", \"North\", 150, 13.48, 4.50, 60.67, 0.50, 61.17, 0.72, 0, \"Gas\"],\n",
    "    # Beachfront\n",
    "    [\"Beachfront\", \"COOLWATER\", \"South\", 650, 9.31, 4.50, 41.89, 0.50, 42.39, 0.49, 2000, \"Gas\"],\n",
    "    [\"Beachfront\", \"ETIWANDA 1-4\", \"South\", 850, 9.15, 4.50, 41.17, 1.50, 42.67, 0.49, 8000, \"Gas\"],\n",
    "    [\"Beachfront\", \"ETIWANDA 5\", \"South\", 150, 13.64, 4.50, 61.39, 1.50, 62.89, 0.72, 1000, \"Gas\"],\n",
    "    [\"Beachfront\", \"ELLWOOD\", \"South\", 300, 16.69, 4.50, 75.11, 0.50, 75.61, 0.89, 0, \"Gas\"],\n",
    "    [\"Beachfront\", \"MANDALAY 1&2\", \"South\", 300, 8.35, 4.50, 37.56, 1.50, 39.06, 0.44, 1000, \"Gas\"],\n",
    "    [\"Beachfront\", \"MANDALAY 3\", \"South\", 150, 11.23, 4.50, 50.56, 1.50, 52.06, 0.60, 1000, \"Gas\"],\n",
    "    [\"Beachfront\", \"ORMOND BEACH 1\", \"South\", 700, 8.35, 4.50, 37.56, 0.50, 38.06, 0.44, 7000, \"Gas\"],\n",
    "    [\"Beachfront\", \"ORMOND BEACH 2\", \"South\", 700, 8.35, 4.50, 37.56, 0.50, 38.06, 0.44, 7000, \"Gas\"],\n",
    "]\n",
    "\n",
    "portfolios_df = pd.DataFrame(portfolio_data, columns=[\n",
    "    \"Category\", \"Unit\", \"Location\", \"Capacity (MW)\", \"Heat Rate (MMBTU/MWh)\",\n",
    "    \"Fuel Price ($/MMBTU)\", \"Fuel Cost ($/MWh)\", \"Var O&M ($/MWh)\",\n",
    "    \"Total Var Cost ($/MWh)\", \"CO2e (tons/MWh)\", \"O&M/Day ($)\", \"Fuel\"\n",
    "])\n",
    "\n",
    "# ---------------------------\n",
    "# Create the full demand forecasts DataFrame\n",
    "# ---------------------------\n",
    "northern_demand = [\n",
    "    [1, 1, 1, \"North\", 4180, -1.92],\n",
    "    [1, 1, 2, \"North\", 4667, -2.30],\n",
    "    [1, 1, 3, \"North\", 6209, -2.79],\n",
    "    [1, 1, 4, \"North\", 5455, -2.78],\n",
    "    [1, 2, 1, \"North\", 4020, -2.00],\n",
    "    [1, 2, 2, \"North\", 4020, -2.54],\n",
    "    [1, 2, 3, \"North\", 8786, -2.41],\n",
    "    [1, 2, 4, \"North\", 5025, -2.54],\n",
    "    [1, 3, 1, \"North\", 4221, -1.96],\n",
    "    [1, 3, 2, \"North\", 4523, -2.33],\n",
    "    [1, 3, 3, \"North\", 6644, -2.86],\n",
    "    [1, 3, 4, \"North\", 5528, -2.71],\n",
    "    [2, 1, 1, \"North\", 4171, -1.97],\n",
    "    [2, 1, 2, \"North\", 3982, -2.50],\n",
    "    [2, 1, 3, \"North\", 8979, -2.45],\n",
    "    [2, 1, 4, \"North\", 4994, -2.54],\n",
    "    [2, 2, 1, \"North\", 4180, -1.92],\n",
    "    [2, 2, 2, \"North\", 4667, -2.30],\n",
    "    [2, 2, 3, \"North\", 6209, -2.79],\n",
    "    [2, 2, 4, \"North\", 5455, -2.78],\n",
    "    [2, 3, 1, \"North\", 4020, -2.00],\n",
    "    [2, 3, 2, \"North\", 4020, -2.54],\n",
    "    [2, 3, 3, \"North\", 8786, -2.41],\n",
    "    [2, 3, 4, \"North\", 5025, -2.54],\n",
    "]\n",
    "\n",
    "southern_demand = [\n",
    "    [1, 1, 1, \"South\", 6696, -2.02],\n",
    "    [1, 1, 2, \"South\", 9118, -2.34],\n",
    "    [1, 1, 3, \"South\", 12132, -2.90],\n",
    "    [1, 1, 4, \"South\", 10364, -2.70],\n",
    "    [1, 2, 1, \"South\", 7035, -2.00],\n",
    "    [1, 2, 2, \"South\", 11055, -2.54],\n",
    "    [1, 2, 3, \"South\", 12631, -2.41],\n",
    "    [1, 2, 4, \"South\", 10050, -2.54],\n",
    "    [1, 3, 1, \"South\", 6633, -1.96],\n",
    "    [1, 3, 2, \"South\", 9045, -2.33],\n",
    "    [1, 3, 3, \"South\", 13308, -2.86],\n",
    "    [1, 3, 4, \"South\", 10553, -2.71],\n",
    "    [2, 1, 1, \"South\", 7209, -1.90],\n",
    "    [2, 1, 2, \"South\", 11168, -2.57],\n",
    "    [2, 1, 3, \"South\", 12443, -2.43],\n",
    "    [2, 1, 4, \"South\", 9871, -2.44],\n",
    "    [2, 2, 1, \"South\", 6696, -2.02],\n",
    "    [2, 2, 2, \"South\", 9118, -2.34],\n",
    "    [2, 2, 3, \"South\", 12132, -2.90],\n",
    "    [2, 2, 4, \"South\", 10364, -2.70],\n",
    "    [2, 3, 1, \"South\", 7035, -2.00],\n",
    "    [2, 3, 2, \"South\", 11055, -2.54],\n",
    "    [2, 3, 3, \"South\", 12631, -2.41],\n",
    "    [2, 3, 4, \"South\", 10050, -2.54],\n",
    "]\n",
    "\n",
    "demand_data = northern_demand + southern_demand\n",
    "demand_forecasts_df = pd.DataFrame(demand_data, columns=[\"Year\", \"Day\", \"Hour\", \"Region\", \"Intercept\", \"Slope\"])\n",
    "\n",
    "# ---------------------------\n",
    "# Define the interactive plotting function\n",
    "# ---------------------------\n",
    "def interactive_market_plot(year, day, hour, region_filter):\n",
    "    # For combined, we aggregate both regions.\n",
    "    if region_filter == \"Combined\":\n",
    "        # Get both North and South for this time period\n",
    "        demand_rows = demand_forecasts_df[\n",
    "            (demand_forecasts_df['Year'] == year) &\n",
    "            (demand_forecasts_df['Day'] == day) &\n",
    "            (demand_forecasts_df['Hour'] == hour)\n",
    "        ]\n",
    "        if demand_rows.empty or len(demand_rows) < 2:\n",
    "            print(\"No complete demand forecast data for Combined region for the selected combination.\")\n",
    "            return\n",
    "        # Sum intercepts and slopes\n",
    "        intercept = demand_rows[\"Intercept\"].sum()\n",
    "        slope = demand_rows[\"Slope\"].sum()\n",
    "        # Use all portfolio data (both regions)\n",
    "        portfolio_data_filtered = portfolios_df.copy()\n",
    "    else:\n",
    "        # Use the specific region's demand forecast\n",
    "        demand_row = demand_forecasts_df[\n",
    "            (demand_forecasts_df['Year'] == year) &\n",
    "            (demand_forecasts_df['Day'] == day) &\n",
    "            (demand_forecasts_df['Hour'] == hour) &\n",
    "            (demand_forecasts_df['Region'] == region_filter)\n",
    "        ]\n",
    "        if demand_row.empty:\n",
    "            print(\"No demand forecast data for the selected combination.\")\n",
    "            return\n",
    "        intercept = demand_row[\"Intercept\"].values[0]\n",
    "        slope = demand_row[\"Slope\"].values[0]\n",
    "        # Filter portfolio data by region\n",
    "        portfolio_data_filtered = portfolios_df[portfolios_df[\"Location\"] == region_filter].copy()\n",
    "        if portfolio_data_filtered.empty:\n",
    "            print(\"No portfolio data for the selected region.\")\n",
    "            return\n",
    "\n",
    "    # Sort portfolio units by total variable cost\n",
    "    portfolio_data_filtered = portfolio_data_filtered.sort_values(\"Total Var Cost ($/MWh)\").reset_index(drop=True)\n",
    "\n",
    "    # Build the stepwise supply curve and cumulative total cost curve\n",
    "    supply_x, supply_y = [], []\n",
    "    total_cost_x, total_cost_y = [], []\n",
    "    cum_q = 0\n",
    "    cum_cost = 0\n",
    "\n",
    "    for _, row in portfolio_data_filtered.iterrows():\n",
    "        cap = row[\"Capacity (MW)\"]\n",
    "        cost = row[\"Total Var Cost ($/MWh)\"]\n",
    "        supply_x.extend([cum_q, cum_q + cap])\n",
    "        supply_y.extend([cost, cost])\n",
    "        block_q = np.linspace(0, cap, 50)\n",
    "        for q in block_q:\n",
    "            total_cost_x.append(cum_q + q)\n",
    "            total_cost_y.append(cum_cost + q * cost)\n",
    "        cum_q += cap\n",
    "        cum_cost += cap * cost\n",
    "\n",
    "    # Define a price range for the demand curve\n",
    "    price_range = np.linspace(0, 150, 1000)\n",
    "    # Central demand curve: Q = intercept + slope * P\n",
    "    demand_quantity = intercept + slope * price_range\n",
    "    # Lower and upper bounds for Â±6% error in the forecast load (affecting the intercept)\n",
    "    lower_demand_quantity = (intercept * 0.94) + slope * price_range\n",
    "    upper_demand_quantity = (intercept * 1.06) + slope * price_range\n",
    "\n",
    "    # Plot the supply and demand curves with the uncertainty band.\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.step(supply_x, supply_y, where='post', label='Supply Curve', color='blue')\n",
    "    plt.fill_betweenx(price_range, lower_demand_quantity, upper_demand_quantity, color='red', alpha=0.3,\n",
    "                      label='Â±6% Demand Forecast Error')\n",
    "    plt.plot(demand_quantity, price_range, label=f'Demand Curve ({region_filter})', color='red', linewidth=2)\n",
    "    plt.title(f'Supply vs Demand | {region_filter} | Year {year} Day {day} Hour {hour}')\n",
    "    plt.xlabel('Quantity (MW)')\n",
    "    plt.ylabel('Price ($/MWh)')\n",
    "    # Limit the y-axis to 0-100 and add horizontal lines every 5 units.\n",
    "    plt.ylim(0, 100)\n",
    "    plt.yticks(np.arange(0, 101, 5))\n",
    "    plt.grid(which='both', axis='y', linestyle='--', linewidth=0.5)\n",
    "    plt.legend()\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "# ---------------------------\n",
    "# Create interactive widgets\n",
    "# ---------------------------\n",
    "year_slider = widgets.IntSlider(min=1, max=2, step=1, value=1, description='Year')\n",
    "day_slider = widgets.IntSlider(min=1, max=3, step=1, value=1, description='Day')\n",
    "hour_slider = widgets.IntSlider(min=1, max=4, step=1, value=1, description='Hour')\n",
    "region_dropdown = widgets.Dropdown(options=[\"North\", \"South\", \"Combined\"], value=\"South\", description='Region')\n",
    "\n",
    "interactive_ui = widgets.interactive(\n",
    "    interactive_market_plot,\n",
    "    year=year_slider,\n",
    "    day=day_slider,\n",
    "    hour=hour_slider,\n",
    "    region_filter=region_dropdown\n",
    ")\n",
    "\n",
    "display(interactive_ui)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "934f6d94-2fb6-471f-8fb7-fef4be5f965a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e219305a-49b2-4e88-8cc2-13473bcbc8c5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-ai-2024.04-py310",
   "language": "python",
   "name": "conda-env-anaconda-ai-2024.04-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
